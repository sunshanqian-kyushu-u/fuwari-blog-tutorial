---
import { Icon } from 'astro-icon/components'
import { siteConfig, NavbarLinks } from '../config/site.config'
---

<div class="sticky top-0 bg-[var(--card-bg)] md:h-[4.5rem] h-16 rounded-2xl rounded-t-none
max-w-[1168px] mx-auto max-[1200px]:mx-4 max-md:mx-0 transition-all">
    <div class="flex h-full items-center justify-between md:px-4 px-3.5">
        <a href="/" class="flex items-center h-12 md:h-[3.25rem] px-4 md:px-5
        rounded-md md:rounded-lg hover:bg-[var(--btn-bg-hover)] active:bg-[var(--btn-bg-active)] 
        active:scale-95 transition-all">
            <Icon name="material-symbols:home-outline-rounded" 
            class="text-[var(--btn-text-hover)] md:text-[28px] text-[25px] mb-1 transition-all"/>
            <p class="text-[var(--btn-text-hover)] md:text-[15px] text-[13px] font-bold 
            md:ml-[7px] ml-[5px] transition-all">
                { siteConfig.name }
            </p>
        </a>
        <div class="flex max-md:hidden">
            { NavbarLinks.map((link) => (
                link.enabled && <a href={ link.url } target={ link.external ? "_blank" : null } 
                class="flex items-center h-11 px-5 rounded-lg hover:bg-[var(--btn-bg-hover)] 
                active:bg-[var(--btn-bg-active)] active:scale-95 group transition-all">
                    <p class="text-[15px] font-bold text-[var(--btn-text)] 
                    group-hover:text-[var(--btn-text-hover)] transition-all">{ link.name }</p>
                    { link.external && <Icon name="fa6-solid:arrow-up-right-from-square"
                    class="text-[13px] ml-[3px] mb-[3px] text-[var(--navbar-github-icon)]"/>}
                </a>
            )) }
        </div>
        <button id="theme-btn" class="flex w-10 h-10 items-center justify-center rounded-lg active:scale-95
        hover:bg-[var(--btn-bg-hover)] active:bg-[var(--btn-bg-active)] group transition-all">
            <Icon name="material-symbols:wb-sunny-outline-rounded" class={`
            md:text-xl text-base text-[var(--btn-text)] group-hover:text-[var(--btn-text-hover)] 
            absolute opacity-[var(--opacity-light)] transition-all`}/>
            <Icon name="material-symbols:dark-mode-outline-rounded" class={`
            md:text-xl text-base text-[var(--btn-text)] group-hover:text-[var(--btn-text-hover)] 
            absolute opacity-[var(--opacity-dark)] transition-all`}/>
            <Icon name="material-symbols:radio-button-partial-outline" class={`
            md:text-xl text-base text-[var(--btn-text)] group-hover:text-[var(--btn-text-hover)] 
            absolute opacity-[var(--opacity-auto)] transition-all`}/>
        </button>
    </div>
    <div id="theme-menu" class="absolute right-0 mt-1.5 p-2 bg-[var(--card-bg)] rounded-2xl shadow-xl
    -translate-y-1 opacity-0 pointer-events-none max-md:hidden transition-all">
        <button id="light-btn" class="flex items-center h-10 w-28 bg-[var(--btn-bg-light)] rounded-lg
        active:scale-95 hover:bg-[var(--btn-bg-hover)] active:bg-[var(--btn-bg-active)] group
        transition-all">
            <Icon name="material-symbols:wb-sunny-outline-rounded" 
            class={`text-[1.25rem] ml-3 text-[var(--btn-text-light)]
            group-hover:text-[var(--btn-text-hover)] transition-all`}/>
            <p class="font-semibold ml-2 text-[var(--btn-text-light)] group-hover:text-[var(--btn-text-hover)] 
            transition-all">Light</p>
        </button>
        <button id="dark-btn" class="flex items-center h-10 w-28 mt-1 bg-[var(--btn-bg-dark)] rounded-lg
        active:scale-95 hover:bg-[var(--btn-bg-hover)] active:bg-[var(--btn-bg-active)] group 
        transition-all">
            <Icon name="material-symbols:dark-mode-outline-rounded" 
            class={`text-[1.25rem] ml-3 text-[var(--btn-text-dark)] 
            group-hover:text-[var(--btn-text-hover)] transition-all`}/>
            <p class="font-semibold ml-2 text-[var(--btn-text-dark)] group-hover:text-[var(--btn-text-hover)] 
            transition-all">Dark</p>
        </button>
        <button id="auto-btn" class="flex items-center h-10 w-28 mt-1 bg-[var(--btn-bg-auto)] rounded-lg
        active:scale-95 hover:bg-[var(--btn-bg-hover)] active:bg-[var(--btn-bg-active)] group 
        transition-all">
            <Icon name="material-symbols:radio-button-partial-outline" 
            class={`text-[1.25rem] ml-3 text-[var(--btn-text-auto)]
            group-hover:text-[var(--btn-text-hover)] transition-all`}/>
            <p class="font-semibold ml-2 text-[var(--btn-text-auto)] group-hover:text-[var(--btn-text-hover)] 
            transition-all">System</p>
        </button>
    </div>
</div>

</div>
<script>
    document.getElementById("theme-btn")?.addEventListener("click", () => {
        const htmlEl = document.documentElement;
        const currentTheme = htmlEl.getAttribute("data-theme");
        if (currentTheme === "light") {
            htmlEl.setAttribute("data-theme", "dark");
            localStorage.setItem("theme", "dark");
        } else if (currentTheme === "dark") {
            htmlEl.setAttribute("data-theme", "auto");
            localStorage.setItem("theme", "auto");
        } else {
            htmlEl.setAttribute("data-theme", "light");
            localStorage.setItem("theme", "light");
        }
    });

    document.getElementById("light-btn")?.addEventListener("click", () => {
        document.documentElement.setAttribute("data-theme", "light");
        localStorage.setItem("theme", "light");
    });

    document.getElementById("dark-btn")?.addEventListener("click", () => {
        document.documentElement.setAttribute("data-theme", "dark");
        localStorage.setItem("theme", "dark");
    });

    document.getElementById("auto-btn")?.addEventListener("click", () => {
        document.documentElement.setAttribute("data-theme", "auto");
        localStorage.setItem("theme", "auto");
    });

    type TimerRef = { current: number | null };

    function showPanel (timerRef: TimerRef, element: HTMLElement) {
        if (timerRef.current !== null) {
            clearTimeout(timerRef.current);
            timerRef.current = null;
        }
        element.classList.remove("-translate-y-1", "opacity-0", "pointer-events-none");
    }

    function hidePanel (timerRef: TimerRef, element: HTMLElement, delay = 100) {
        if (timerRef.current !== null) {
            clearTimeout(timerRef.current);
        }
        timerRef.current = window.setTimeout(() => {
            element.classList.add("-translate-y-1", "opacity-0", "pointer-events-none");
            timerRef.current = null;
        }, delay);
    }

    const themeTimer = { current: null } as TimerRef;

    document.getElementById("theme-btn")?.addEventListener("mouseenter", () => {
        showPanel(themeTimer, document.getElementById("theme-menu")!);
    });

    document.getElementById("theme-btn")?.addEventListener("mouseleave", () => {
        hidePanel(themeTimer, document.getElementById("theme-menu")!);
    });

    document.getElementById("theme-menu")?.addEventListener("mouseenter", () => {
        showPanel(themeTimer, document.getElementById("theme-menu")!);
    });

    document.getElementById("theme-menu")?.addEventListener("mouseleave", () => {
        hidePanel(themeTimer, document.getElementById("theme-menu")!);
    });
</script>
